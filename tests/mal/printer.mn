function _pr_str(obj, $tbool print_readably) {
	return if o == NULL
		@"nil"
	else if objn_Typecheck(MalTrue,obj,true)
		@"true"
	else if objn_Typecheck(MalFalse,obj,true)
		@"false"
	else if objn_Typecheck(MalSymbol,obj,true)
		@($string(obj))
	else if objn_Typecheck(ON_String,obj,true) {
		if [obj length] > 0 && [obj hasPrefix:@"\202\158"] {
			@(":" + [[obj substringWithRange:ON_MakeRange(1, [obj length]-1)] raw])
		} else if print_readably {
			obj = [[obj componentsSeparatedByString:@"\\"] componentsJoinedByString:@"\\\\"]
			obj = [[obj componentsSeparatedByString:@"\""] componentsJoinedByString:@"\\\""]
			obj = [[obj componentsSeparatedByString:@"\n"] componentsJoinedByString:@"\\n"]
			
			@("\"" + [obj raw] + "\"")
		} else {
			obj
		}
	} else if objn_Typecheck(ON_Array,obj,true) {
		var elems = [ON_MutableArray array]
		
		for(var i = 0; i < [obj count]; i += 1)
			[elems addValue:_pr_str(obj[i], print_readably)]
		
		if objn_Typecheck(MalVector,obj,true)
			@("[" + [[elems componentsJoinedByString:@" "] raw] + "]")
		else
			@("(" + [[elems componentsJoinedByString:@" "] raw] + ")")
	} else if objn_Typecheck(ON_Dictionary,obj,true) {
		var dict = [ON_Dictionary dictionaryWithDictionary:obj]
		var elems = [ON_MutableArray array]
		var keys = [dict allKeys]
		
		for(var i = 0; i < [keys count]; i += 1) {
			[elems addValue:_pr_str(keys[i], print_readably)]
			[elems addValue:_pr_str(dict[keys[i]], print_readably)]
		}
		
		@("{" + [[elems componentsJoinedByString:@" "] raw] + "}")
	} else if block_Q(obj)
		@"#<native function>"
	else if atom_Q(obj)
		@("(atom " + [_pr_str([obj val], print_readably) raw] + ")")
	else
		@($string(obj))
}