@interface Reader : ON_Object
	@property tokens
	@property position
	
	- initWithTokens:toks
	- init
	- next
	- peek
	- eof
@end

@implementation Reader
	- initWithTokens:(ON_Array)toks {
		this->tokens = toks
		this->position = 0
		return this
	}
	
	- init {
		return [this initWithTokens:@[]]
	}
	
	- next {
		if [this eof]
			$throw("No more tokens!")
		else
			return this->tokens[this->position ++= 1]
	}
	
	- peek {
		return if [this eof]
			nil
		else
			this->tokens[this->position]
	}
	
	- eof {
		return [this->tokens count] <= this->position
	}
@end

function tokenize(ON_String str) {
	var regex = [NL_regexp new:"[\\s,]*(~@|[\\[\\]{}()'`~^@]|\"(?:[\\\\].|[^\\\\\"])*\"?|;.*|[^\\s\\[\\]{}()'\"`@,;]+)"]

	var matches = [ON_MutableArray array],
		ranges = [ON_MutableArray array]
	{
		var f = 0,
			_str = $scopy([str raw]),
			_regex = [NL_regexp make]
		
		[regex replace_fun:_str
				      with:^(rx) {
			[_regex rx:rx]
			try [matches addValue:@[@([_regex matched:0]), @([_regex matched:1])]] catch _ {}
			try [ranges addValue:@[[_regex matched_pos:0], [_regex matched_pos:1]]] catch _ {}
			return ""
		}]
	}
	
	var tokens = [ON_MutableArray array]
	
	for(var i = 0; i < [matches count]; i += 1) {
		var mstr = [str substringWithRange:ON_MakeRange(ranges[i][1].pos, ranges[i][1].len)]
		if [mstr characterAtIndex:0] != ";"
			[tokens addValue:mstr]
	}
	
	return [tokens ON_Array]
}

function read_atom(Reader rdr) {
	var regex = [NL_regexp new:"(^-?[0-9]+$)|(^-?[0-9][0-9.]*$)|(^nil$)|(^true$)|(^false$)|^\"((?:[\\\\].|[^\\\\\"])*)\"$|^\"(.*)$|:(.*)|(^[^\"]*$)"]
	
	var token = [rdr next]
	
	var matches = [ON_MutableArray array],
		ranges = [ON_MutableArray array]
	{
		var f = 0,
			_str = $scopy([token raw]),
			_regex = [NL_regexp make]
		
		[regex replace_fun:_str
					  with:^(rx) {
			[_regex rx:rx]
			try [matches addValue:@[
				@([_regex matched:0]),
				@([_regex matched:1]),
				@([_regex matched:2]),
				@([_regex matched:3]),
				@([_regex matched:4]),
				@([_regex matched:5]),
				@([_regex matched:6]),
				@([_regex matched:7]),
				@([_regex matched:8]),
				@([_regex matched:9])
			]] catch _ {}
			try [ranges addValue:@[
				[_regex matched_pos:0],
				[_regex matched_pos:1],
				[_regex matched_pos:2],
				[_regex matched_pos:3],
				[_regex matched_pos:4],
				[_regex matched_pos:5],
				[_regex matched_pos:6],
				[_regex matched_pos:7],
				[_regex matched_pos:8],
				[_regex matched_pos:9]
			]] catch _ {}
			return ""
		}]
	}

	if [matches count] > 0 {
		var match = matches[0],
			range = ranges[0]
		if match[1] { // integer
			return @($int([token raw]))
		} else if match[2] { // float
			return @($float([token raw]))
		} else if match[3] { // nil
			return NULL
		} else if match[4] { // true
			return [MalTrue make]
		} else if match[5] { // false
			return [MalFalse make]
		} else if match[6] { // string
			var str = [token substringWithRange:ON_MakeRange(range[6].pos, range[6].len)]
			str = [[str componentsSeparatedByString:@"\\\\"] componentsJoinedByString:@"\202\158"]
			str = [[str componentsSeparatedByString:@"\\\""] componentsJoinedByString:@"\""]
			str = [[str componentsSeparatedByString:@"\\n"] componentsJoinedByString:@"\n"]
			str = [[str componentsSeparatedByString:@"\202\158"] componentsJoinedByString:@"\\"]
			return str
		} else if match[7] { // string
			$throw("read_atom: expected '\"', got EOF")
		} else if match[8] { // keyword
			return @("\202\158" + [[token substringWithRange:ON_MakeRange(range[8].pos, range[8].len)] raw])
		} else if match[9] { // symbol
			return [MalSymbol new:token]
		}
	}
	
	$throw("read_atom: Invalid token `" + $string(token) + "`")
}

function read_list(Reader rdr, $tstring start, $tstring end) {
	var token = [rdr next], ast = [ON_MutableArray array]
	
	if [token raw] != start
		$throw("Expected '" + start + "'")
	
	while ![rdr eof] && (token = [rdr peek]) != nil && [token raw] != end {
		[ast addValue:read_form(rdr)]
	}
	
	if !token
		$throw("Expected '" + end + "', got EOF")
	
	[rdr next]
	
	return [ast ON_Array]
}

function read_form(Reader rdr) {
	var token = [rdr peek]
	if token == null || token == nil || [rdr eof] $throw("error!")
	return switch [token raw] {
		"'" => {
			[rdr next]
			@[[MalSymbol stringWithString:@"quote"], read_form(rdr)]
		}
		"`" => {
			[rdr next]
			@[[MalSymbol stringWithString:@"quasiquote"], read_form(rdr)]
		}
		"~" => {
			[rdr next]
			if [token isEqualToString:@"~@"]
				@[[MalSymbol stringWithString:@"splice-unquote"], read_form(rdr)]
			else
				@[[MalSymbol stringWithString:@"unquote"], read_form(rdr)]
		}
		"^" => {
			[rdr next]
			var meta = read_form(rdr)
			@[[MalSymbol stringWithString:@"with-meta"], read_form(rdr), meta]
		}
		"@" => {
			[rdr next]
			@[[MalSymbol stringWithString:@"deref"], read_form(rdr)]
		}
		
		// lists
		")" => $throw("Unexpected ')'")
		"(" => read_list(rdr, "(", ")")
		
		// vectors
		"]" => $throw("Unexpected ']'")
		"[" => [MalVector fromArray:read_list(rdr, "[", "]")]
		
		// hash maps
		"}" => $throw("Unexpected '}'")
		"{" => hash_map(read_list(rdr, "{", "}"))
		
		default => read_atom(rdr)
	}
}

function read_str(ON_String str) {
	var tokens = tokenize(str)
	
	if [tokens count] == 0
		$throw("Empty token")
	else
		return read_form([[Reader make] initWithTokens:tokens])
}
