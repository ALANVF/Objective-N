#import "../objn/main.neko"
#import "../objn/object.neko"
#import "../objn/ON.mn"

#import "../tests/mal/mal_readline.mn"
#import "../tests/mal/types.mn"
#import "../tests/mal/reader.mn"
#import "../tests/mal/printer.mn"
#import "../tests/mal/malfunc.mn"
#import "../tests/mal/core.mn"

function READ(str) {objn_Typecheck(ON_String,str,false)
	return read_str(str)
}

function is_pair(obj) {
	obj==null && {return false}
	[obj isKindOfClass:ON_Array] && [obj count] > 0
}

function quasiquote(ast) {objn_Typecheck(ON_Object,ast,false)
	if !is_pair(ast)
		return @[[MalSymbol new:@"quote"], ast]
	else {
		var a0 = ast[0]
		if [a0 isKindOfClass:MalSymbol] && [@($string(a0)) isEqualToString:@"unquote"]
			return ast[1]
		else if is_pair(a0) {
			var a00 = a0[0]
			if [a00 isKindOfClass:MalSymbol] && [@($string(a00)) isEqualToString:@"splice-unquote"]
				return @[[MalSymbol new:@"concat"], a0[1], quasiquote(_rest(ast))]
		}
		return @[[MalSymbol new:@"cons"], quasiquote(a0), quasiquote(_rest(ast))]
	}
}

function is_macro_call(ast, env) {objn_Typecheck($array($tnull,ON_Object),ast,false);objn_Typecheck(Env,env,false)
	if list_Q(ast) {
		if [ast[0] isKindOfClass:MalSymbol] && [env find:ast[0]] {
			var mf = [env get:ast[0]]
			return false if $typeof(mf)!=$tobject
			if [mf isKindOfClass:MalFunc]
				return [mf isMacro]
		}
	}
	return false
}

function macroexpand(ast, env) {objn_Typecheck($array($tnull,ON_Object),ast,false);objn_Typecheck(Env,env,false)
	while is_macro_call(ast, env)
		ast = [[env get:ast[0]] apply:_rest(ast)]
	
	return ast
}



function eval_ast(ast, env) {objn_Typecheck($array($tnull,ON_Object),ast,false);objn_Typecheck(Env,env,false)
	if [ast isKindOfClass:MalSymbol] {
		return [env get:ast]
	} else if [ast isKindOfClass:ON_Array] {
		var newList = [ast arrayWithFunction:^(v) {EVAL(v, env)}]
		if [ast isKindOfClass:MalVector]
			return [MalVector fromArray:newList]
		else
			return newList
	} else if [ast isKindOfClass:ON_Dictionary] {
		var newDict = [ON_MutableDictionary dictionary]
		
		var k = [ast allKeys], v = [ast allValues]
		for(var i = 0; i < [ast count]; i += 1)
			newDict[k[i]] = EVAL(v[i], env)
		
		return [newDict ON_Dictionary]
	} else {
		return ast
	}
}

function EVAL(ast, env) {objn_Typecheck($array($tnull,ON_Object),ast,false);objn_Typecheck(Env,env,false)
	while true {
		if !list_Q(ast)
			return eval_ast(ast, env)
		
		if [ast count] == 0
			return ast
		
		ast = macroexpand(ast, env)
		if !list_Q(ast)
			return eval_ast(ast, env)
		
		var a0 = ast[0]
		var a0sym = if [a0 isKindOfClass:MalSymbol] @($string(a0)) else @"__<*fn*>__"
		
		if [a0sym isEqualToString:@"def!"]
			return [env set:ast[1] val:EVAL(ast[2], env)]
		else if [a0sym isEqualToString:@"let*"] {
			var let_env = [Env fromOuter:env],
				binds = ast[1]
			for(var i = 0; i < [binds count]; i += 2)
				[let_env set:binds[i] val:EVAL(binds[i+1], let_env)]
			
			env = let_env
			ast = ast[2] // TCO
		} else if [a0sym isEqualToString:@"quote"] {
			return ast[1]
		} else if [a0sym isEqualToString:@"quasiquote"] {
			ast = quasiquote(ast[1]) // TCO
		} else if [a0sym isEqualToString:@"defmacro!"] {
			var f = EVAL(ast[2], env)
			[f isMacro: true]
			return [env set:ast[1] val:f]
		} else if [a0sym isEqualToString:@"macroexpand"] {
			return macroexpand(ast[1], env)
		} else if [a0sym isEqualToString:@"try*"] {
			try {
				return EVAL(ast[1], env)
			} catch e {
				if [ast count] > 2 && [ast[2] isKindOfClass:ON_Array] {
					var a2 = ast[2]
					if [a2[0] isKindOfClass:MalSymbol] && [[MalSymbol new:a2[0]] isEqualToString:@"catch*"]
						return EVAL(a2[2], [Env fromBindings:env
														  binds:@[a2[1]]
														  exprs:@[@(e)]])
				}
				$throw(e)
			} 
		} else if [a0sym isEqualToString:@"do"] {
			eval_ast([ast subarrayWithRange:ON_MakeRange(1, [ast count] - 2)], env)
			ast = [ast lastValue] // TCO
		} else if [a0sym isEqualToString:@"if"] {
			var cond = EVAL(ast[1], env)
			if objn_Typecheck($array($tnull,MalFalse),cond,true) {
				if [ast count] > 3 {
					ast = ast[3] // TCO
				} else {
					return null
				}
			} else {
				ast = ast[2] // TCO
			}
		} else if [a0sym isEqualToString:@"fn*"] {
			return [[MalFunc make] init:ast[2] env:env params:ast[1]]
		} else {
			var el = eval_ast(ast, env),
				args = @[]
			
			if [el count] > 1
				args = _rest(el)
			
			if objn_Typecheck(MalFunc,el[0],true) {
				env = [Env fromBindings:[el[0] env]
								  binds:[el[0] params]
								  exprs:args]
				ast = [el[0] ast] // TCO
			} else {
				return el[0](args)
			}
		}
	}
}

function PRINT(exp) {//objn_Typecheck($array($tnull,ON_Object),exp,false)
	return _pr_str(exp, true)
}

function REP(line, env) {objn_Typecheck(ON_String,line,false);objn_Typecheck(Env,env,false)
	return PRINT(EVAL(READ(line), env))
}

function main() {
	var repl_env = [[Env make] init],
		core_ns = [Core ns],
		args = [@($loader.args) arrayWithFunction:^(v) {@(v)}]
	
	var k = [core_ns allKeys],
		v = [core_ns allValues]
	
	for(var i = 0; i < [core_ns count]; i += 1)
		[repl_env set:[MalSymbol new:k[i]] val:v[i]]
	
	[repl_env set:[MalSymbol new:@"eval"] val:^(args) {
		return EVAL(args[0], repl_env)
	}]
	
	var argv = @[]
	if [args count] > 2
		argv = [args subarrayWithRange:ON_MakeRange(2, [args count] - 2)]
	
	[repl_env set:[MalSymbol new:@"*ARGV*"] val:argv]
	
	REP(@"(def! not (fn* (a) (if a false true)))", repl_env)
	REP(@"(def! load-file (fn* (f) (eval (read-string (str \"(do \" (slurp f) \")\")))))", repl_env)
	REP(@"(defmacro! cond (fn* (& xs) (if (> (count xs) 0) (list 'if (first xs) (if (> (count xs) 1) (nth xs 1) (throw \"odd number of forms to cond\")) (cons 'cond (rest (rest xs)))))))", repl_env)
	REP(@"(defmacro! or (fn* (& xs) (eval (if (empty? xs) nil (if (= 1 (count xs)) (first xs) `(let* (or_FIXME ~(first xs)) (if or_FIXME or_FIXME (or ~@(rest xs))))))) ))", repl_env)
	
	if [args count] > 1 {
		try
			REP(@("(load-file \"" + [args[1] raw] + "\")"), repl_env)
		catch e
			$print("Error: ", e, "\n")
		
		return null
	}
	
	while true {
		var rawline = _readline("user> ")
		if rawline == "" {break}
		var line = @(rawline)
		if [line length] == 0 continue
		
		try
			$print(REP(line, repl_env), "\n")
		catch e
			$print("Exception: ", e, " : ", $excstack(), "\n")
	}
}

main()