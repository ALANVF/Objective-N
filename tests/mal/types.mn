#import "../tests/mal/types.hn"

@implementation Env
	- initWithBindings:(Env | ON_Nil)outer binds:(ON_Array)binds exprs:(ON_Array)exprs {
		this->outer = objn_Copy(outer)
		this->data = [ON_MutableDictionary dictionary]
		
		for(var i = 0; i < [binds count]; i += 1) {
			if [@($string(binds[i])) isEqualToString:@"&"] {
				this->data[binds[i+1]] = if [exprs count] > i
					[exprs subarrayWithRange:ON_MakeRange(i, [exprs count] - i)]
				else
					@[]
				break;
			} else {
				this->data[binds[i]] = exprs[i]
			}
		}
		
		return this
	}
	
	- initWithOuter:outer {
		return [this initWithBindings:outer
		                        binds:@[]
		                        exprs:@[]]
	}
	
	- init {
		return [this initWithBindings:nil
		                        binds:@[]
		                        exprs:@[]]
	}
	
	+ fromOuter:outer {
		return [[Env make] initWithOuter:outer]
	}
	
	+ fromBindings:outer binds:binds exprs:exprs {
		return [[Env make] initWithBindings:outer
		                              binds:binds
		                              exprs:exprs]
	}
	
	- set:(MalSymbol)key val:val {
		this->data[key] = val
		return val
	}
	
	- (Env | ON_Nil) find:(MalSymbol)key {
		return if [this->data hasKey:key]
			this
		else if this->outer
			[this->outer find:key]
		else
			nil
	}
	
	- get:(MalSymbol)key {
		var e = [this find:key]
		if e
			return [e data][key]
		else
			$throw("'"+$string(key)+"' not found")
    }
@end

@implementation MalTrue
@end

@implementation MalFalse
@end

@implementation MalSymbol
	+ new:str {[this stringWithString:str]}
@end

function string_Q(ON_Object obj): $tbool {
	if [obj isKindOfClass:ON_String] {
		var s = [obj ON_String]
		if [s isKindOfClass:MalSymbol] {
			return ![s hasPrefix:@"\202\158"]
		}
	}
	return false
}

// lists

function list_Q(obj): $tbool {
	return [obj isKindOfClass:ON_Array] && ![obj isKindOfClass:MalVector]
}

function _rest(ON_Array obj): ON_Array {
	return [obj subarrayWithRange:ON_MakeRange(1, [obj count]-1)]
}

// vectors

@implementation MalVector
	+ fromArray:(ON_Array)arr {
		return [[this make] initWithArray:arr copyItems:false]
	}
@end

function assoc_BANG(ON_MutableDictionary d, ON_Array kvs): ON_MutableDictionary {
	for(var i = 0; i < [kvs count]; i += 2)
		d[kvs[i]] = kvs[i+1]
	return d
}

function hash_map(ON_Array kvs): ON_MutableDictionary {
	return assoc_BANG([ON_MutableDictionary dictionary], kvs)
}

// mal functions

function block_Q(obj): $tbool {
	return $typeof(obj) == $tfunction
}

@implementation MalAtom
	- init:val {
		this->val = objn_Copy(val)
		return this
	}
	
	+ fromObject:val {
		return [[MalAtom make] init:val]
	}
@end

function atom_Q(obj): $tbool {
	return objn_Typecheck(MalAtom, obj, true)
}

// general functions

function sequential_Q(ON_Object obj): $tbool {
	return objn_Typecheck(ON_Array, obj, true)
}

function equal_Q(ON_Object a, ON_Object b): $tbool {
	if !([a class] == [b class]
			||
		([a isKindOfClass:ON_Array] && [a isKindOfClass:ON_Array])
			||
		([a isKindOfClass:ON_Number] && [b isKindOfClass:ON_Number])
			||
		(string_Q(a) && string_Q(b))
	) {
		return false
	}
	
	if [a isKindOfClass:MalTrue]
		return true
	else if [a isKindOfClass:MalFalse]
		return true
	else if [a isKindOfClass:ON_Number]
		return [a raw] == [b raw]
	else
		return a == b
}