#import "../objn/main.neko"
#import "../objn/object.neko"
#import "../objn/ON.mn"

#import "../tests/mal/mal_readline.mn"
#import "../tests/mal/types.mn"
#import "../tests/mal/reader.mn"
#import "../tests/mal/printer.mn"

function READ(ON_String str) {
	return read_str(str)
}

function eval_ast(ON_Object ast, Env env) {
	if [ast isKindOfClass:MalSymbol] {
		if [env hasKey:ast]
			return env[ast]
		else
			$throw("'" + $string(ast) + "' not found")
	} else if [ast isKindOfClass:ON_Array] {
		var newList = [ast arrayWithFunction:^(v) {EVAL(v, env)}]
		return if [ast isKindOfClass:MalVector]
			[MalVector fromArray:newList]
		else
			newList
	} else if [ast isKindOfClass:ON_Dictionary] {
		var newDict = [ON_MutableDictionary dictionary]
		
		for(var k, v in ast)
			newDict[k] = EVAL(v, env)
		
		return [newDict ON_Dictionary]
	} else {
		return ast
	}
}

function EVAL(ON_Object ast, Env env) {
	if !list_Q(ast)
		return eval_ast(ast, env)
	
	if [ast count] == 0
		return ast
	
	var el = eval_ast(ast, env)
	var f = el[0]
	return f(_rest(el))
}

function PRINT(ON_Object exp) {
	return _pr_str(exp, true)
}

function REP(ON_String line, Env env) {
	return PRINT(EVAL(READ(line), env))
}

function main() {
	var repl_env = @{
		@"+": ^(args) {[args[0] raw] + [args[1] raw]},
		@"-": ^(args) {[args[0] raw] - [args[1] raw]},
		@"*": ^(args) {[args[0] raw] * [args[1] raw]},
		@"/": ^(args) {[args[0] raw] / [args[1] raw]}
	}
	
	while true {
		var rawline = _readline("user> ")
		var line = @(rawline)
		if [line length] == 0 continue
		$print(REP(line, repl_env), "\n")
	}
}

main()