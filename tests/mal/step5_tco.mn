#import "../objn/main.neko"
#import "../objn/object.neko"
#import "../objn/ON.mn"

#import "../tests/mal/mal_readline.mn"
#import "../tests/mal/types.mn"
#import "../tests/mal/reader.mn"
#import "../tests/mal/printer.mn"
#import "../tests/mal/malfunc.mn"
#import "../tests/mal/core.mn"

function READ(ON_String str) {
	return read_str(str)
}

function eval_ast(ON_Object ast, Env env) {
	if [ast isKindOfClass:MalSymbol] {
		return [env get:ast]
	} else if [ast isKindOfClass:ON_Array] {
		var newList = [ast arrayWithFunction:^(v) {EVAL(v, env)}]
		return if [ast isKindOfClass:MalVector]
			[MalVector fromArray:newList]
		else
			newList
	} else if [ast isKindOfClass:ON_Dictionary] {
		var newDict = [ON_MutableDictionary dictionary]
		
		for(var k, v in ast)
			newDict[k] = EVAL(v, env)
		
		return [newDict ON_Dictionary]
	} else {
		return ast
	}
}

function EVAL(ON_Object ast, Env env) {
	while true {
		if !list_Q(ast)
			return eval_ast(ast, env)
		
		if [ast count] == 0
			return ast
		
		var a0 = ast[0]
		var a0sym = if [a0 isKindOfClass:MalSymbol] @($string(a0)) else @"__<*fn*>__"
		
		if [a0sym isEqualToString:@"def!"]
			return [env set:ast[1] val:EVAL(ast[2], env)]
		else if [a0sym isEqualToString:@"let*"] {
			var let_env = [Env fromOuter:env],
				binds = ast[1]
			for(var i = 0; i < [binds count]; i += 2)
				[let_env set:binds[i] val:EVAL(binds[i+1], let_env)]
			
			env = let_env
			ast = ast[2] // TCO
		} else if [a0sym isEqualToString:@"do"] {
			eval_ast([ast subarrayWithRange:ON_MakeRange(1, [ast count] - 2)], env)
			ast = [ast lastValue] // TCO
		} else if [a0sym isEqualToString:@"if"] {
			var cond = EVAL(ast[1], env)
			if objn_Typecheck($array(ON_Null,MalFalse),cond,true) {
				if [ast count] > 3 {
					ast = ast[3] // TCO
				} else {
					return NULL
				}
			} else {
				ast = ast[2] // TCO
			}
		} else if [a0sym isEqualToString:@"fn*"] {
			return [[MalFunc make] init:ast[2] env:env params:ast[1]]
		} else {
			var el = eval_ast(ast, env),
				args = @[]
			
			if [el count] > 1
				args = _rest(el)
			
			if objn_Typecheck(MalFunc,el[0],true) {
				env = [Env fromBindings:[el[0] env]
								  binds:[el[0] params]
								  exprs:args]
				ast = [el[0] ast] // TCO
			} else {
				return el[0](args)
			}
		}
	}
}

function PRINT(ON_Object exp) {
	return _pr_str(exp, true)
}

function REP(ON_String line, Env env) {
	return PRINT(EVAL(READ(line), env))
}

function main() {
	var repl_env = [[Env make] init],
		core_ns = [Core ns]
	
	for(var k, v in core_ns)
		[repl_env set:[MalSymbol new:k] val:v]
	
	REP(@"(def! not (fn* (a) (if a false true)))", repl_env)
	
	while true {
		var rawline = _readline("user> ")
		var line = @(rawline)
		if [line length] == 0 continue
		$print(REP(line, repl_env), "\n")
	}
}

main()