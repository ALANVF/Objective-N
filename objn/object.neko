var ON_Object = @class.new("ON_Object", null)

// @interface ON_Object
	ON_Object.@@add_var("class", {read => true}, null)
	ON_Object.@@add_var("className", {read => true}, null)
	
	ON_Object.@@add_class_method(@SEL(0, $array("make")))
	ON_Object.@@add_class_method(@SEL(0, $array("new")))
	
	ON_Object.@@add_class_method(@SEL(1, $array("respondsToSelector")))
	ON_Object.@@add_class_method(@SEL(1, $array("doesNotRecognizeSelector"))) //maybe change to +resolveClassMethod
	
	ON_Object.@@add_class_method(@SEL(0, $array("class")))
	ON_Object.@@add_class_method(@SEL(0, $array("superclass")))
	ON_Object.@@add_class_method(@SEL(1, $array("isSubclassOfClass")))
	
	ON_Object.@@add_class_method(@SEL(1, $array("performSelector")))
	ON_Object.@@add_class_method(@SEL(2, $array("performSelector", "withValues")))
	
	ON_Object.@@add_instance_method(@SEL(0, $array("init")))
	ON_Object.@@add_instance_method(@SEL(0, $array("superclass")))
	ON_Object.@@add_instance_method(@SEL(0, $array("copy")))
	
	ON_Object.@@add_instance_method(@SEL(1, $array("respondsToSelector")))
	ON_Object.@@add_instance_method(@SEL(1, $array("doesNotRecognizeSelector"))) //maybe change to +resolveInstanceMethod
	
	ON_Object.@@add_instance_method(@SEL(1, $array("isKindOfClass")))
	//ON_Object.@@add_instance_method(@SEL(1, $array("isMemberOfClass")))
	
	ON_Object.@@add_instance_method(@SEL(1, $array("performSelector")))
	ON_Object.@@add_instance_method(@SEL(2, $array("performSelector", "withValues")))
	
	ON_Object.@@add_instance_method(@SEL(1, $array("isEqual")))
	
	ON_Object.@@add_instance_method(@SEL(0, $array("__string")))
// @end

// @implementation ON_Object
	ON_Object.@@class_method(@SEL(0, $array("make")), function() {
		var _ = $new(this)
		_.@inst = true
		_.@instance_vars = $new(this.@instance_vars)
		
		var ivl = $objfields(_.@instance_vars)
		var i = 0
		while i < $asize(ivl) {
			if $objget(_.@instance_vars, ivl[i]) != null {
				$objset(_.@instance_vars, ivl[i], $objget(_.@instance_vars, ivl[i])())
			}
			
			i += 1
		}
		
		_.@instance_vars.class = this
		_.@instance_vars.className = this.@name
		return _
	})
	ON_Object.@@class_method(@SEL(0, $array("new")), function() {
		return this.@@send(@SEL(0, $array("make")), $array()).@@send(@SEL(0, $array("init")), $array())
	})
	
	ON_Object.@@class_method(@SEL(1, $array("respondsToSelector")), function(sel) {
		return if $objfield(this.@class_attrs, $hash(sel.@toString())) {
			$objget(this.@class_attrs, $hash(sel.@toString())) != null
		} else {
			false
		}
	})
	ON_Object.@@class_method(@SEL(1, $array("doesNotRecognizeSelector")), function(sel) {
		$throw("Unknown selector `"+sel+"` for class \""+(this.@name)+"\"!")
	})
	
	ON_Object.@@class_method(@SEL(0, $array("class")), function() {
		return this
	})
	ON_Object.@@class_method(@SEL(0, $array("superclass")), function() {
		return this.@super
	})
	ON_Object.@@class_method(@SEL(1, $array("isSubclassOfClass")), function(class) {
		return if this == class
			true
		else if this.@super != null
			this.@super.@@send(@SEL(1, $array("isSubclassOfClass")), $array(class))
		else
			false
	})
	
	ON_Object.@@class_method(@SEL(1, $array("performSelector")), function(sel) {
		return if this.@@send(@SEL(1, $array("respondsToSelector")), $array(sel))
			this.@@send(sel, $array())
		else
			this.@@send(@SEL(1, $array("doesNotRecognizeSelector")), $array(sel))
	})
	ON_Object.@@class_method(@SEL(2, $array("performSelector", "withValues")), function(sel, values) {
		return if this.@@send(@SEL(1, $array("respondsToSelector")), $array(sel))
			this.@@send(sel, values)
		else
			this.@@send(@SEL(1, $array("doesNotRecognizeSelector")), $array(sel))
	})
	
	ON_Object.@@instance_method(@SEL(0, $array("init")), function() {
		if this.@inst
			return this
		else
			$throw("error")
	})
	ON_Object.@@instance_method(@SEL(0, $array("superclass")), function() {
		return this.@@instance_vars.class.@super
	})
	ON_Object.@@instance_method(@SEL(0, $array("copy")), function() {
		return $new(this)
	})
	
	ON_Object.@@instance_method(@SEL(1, $array("respondsToSelector")), function(sel) {
		return if $objfield(this.@instance_attrs, $hash(sel.@toString())) {
			$objget(this.@instance_attrs, $hash(sel.@toString())) != null
		} else {
			false
		}
	})
	ON_Object.@@instance_method(@SEL(1, $array("doesNotRecognizeSelector")), function(sel) {
		$throw("Unknown selector `"+sel+"` for instance of class \""+(this.@name)+"\"!")
	})
	
	ON_Object.@@instance_method(@SEL(1, $array("isKindOfClass")), function(class) {
		return if this.@instance_vars.class == class
			true
		else if this.@super != null
			this.@instance_vars.class.@super.@@send(@SEL(1, $array("isSubclassOfClass")), $array(class))
		else
			false
	})
	
	ON_Object.@@instance_method(@SEL(1, $array("performSelector")), function(sel) {
		return if this.@@send(@SEL(1, $array("respondsToSelector")), $array(sel))
			this.@@send(sel, $array())
		else
			this.@@send(@SEL(1, $array("doesNotRecognizeSelector")), $array(sel))
	})
	ON_Object.@@instance_method(@SEL(2, $array("performSelector", "withValues")), function(sel, values) {
		return if this.@@send(@SEL(1, $array("respondsToSelector")), $array(sel))
			this.@@send(sel, values)
		else
			this.@@send(@SEL(1, $array("doesNotRecognizeSelector")), $array(sel))
	})
	
	ON_Object.@@instance_method(@SEL(1, $array("isEqual")), function(value) {
		return this == value
	})
	
	ON_Object.@@instance_method(@SEL(0, $array("__string")), function() {
		var _ = $new(this.@instance_vars)
		$objremove(_, $hash("class"))
		$objremove(_, $hash("className"))
		return this.@name+_
	})
// @end


var id = $new(null)
@typefmt = function(t) {
	switch $typeof(t) {
		$tint => $array("$tnull","$tint","$tfloat","$tbool","$tstring","$tobject","$tarray","$tfunction","$tabstract")[t]
		$tarray => {
			var out = @typefmt(t[0]), i = 1
			while i < $asize(t) {
				out += "|" + @typefmt(t[i])
				i += 1
			}
			out
		}
		$tobject => $string(t)
	}
}
@typecheck = function(type, value, n) {
	if type == id // maybe fix that idk
		return true
	
	return switch $typeof(type) {
		$tint => {
			if $typeof(value) == type
				true
			else if n
				false
			else
				$throw("`"+$string(value)+"` does not match type `"+@typefmt(type)+"`!")
		}
		$tarray => {
			var t = false, i = 0
			while i < $asize(type) {
				if $not(t)
					t = @typecheck(type[i], value, true)
				i += 1
			}
			if t
				true
			else if n
				false
			else
				$throw("`"+$string(value)+"` does not match type `"+@typefmt(type)+"`!")
		}
		$tobject => {
			if $objfield(type, $hash("@@send")) {
				if $objfield(value, $hash("@@send"))
					value.@@send(@SEL(1, $array("isKindOfClass")), $array(type))
				else if n
					false
				else
					$throw("`"+$string(value)+"` does not match type `"+@typefmt(type)+"`!")
			} else
				$throw("error! ["+$string(value)+"]")
		}
		default => $throw("`"+$string(type)+"` is not a valid type!")
	}
}

var @makecopy = function(val) {
	switch $typeof(val) {
		$tstring => $scopy(val)
		$tarray => $acopy(val)
		$tobject => if $objfield(val, $hash("@@send")) val.@@send(@SEL(0, $array("copy")), $array()) else $new(val)
		$tabstract => $throw("not implemented yet!")
		default => val
	}
}

//temp
var objn_Typecheck = @typecheck,
	objn_Copy = @makecopy