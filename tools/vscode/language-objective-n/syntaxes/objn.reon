#(
	name "Objective-N"
	scopeName "source.objn"
	fileTypes ["mn" "hn"]
	
	patterns [
		#(include #statements)
	]

	repository #(
		empty #(
			patterns [
				#(include #line)
				#(include #space)
				#(include #line-comment)
				#(include #doc-comment)
				#(include #block-comment)
			]
		)

		exprs #(
			patterns [
				#(include #builtins)
				#(include #constants)
				#(include #function)
				#(include #keywords)
				#(include #call)
				#(include #method-call)
				#(include #name)
				#(include #property)
				#(include #member)
				#(include #operators)
				#(include #paren)
				#(include #subscript)
				#(include #dictionary)
				#(include #block-or-object)
				#(include #comma)
				#(include #illegal)
			]
		)

		statements #(
			patterns [
				#(include #label)
				#(include #goto)
				#(include #function-decl)
				#(include #interface)
				#(include #implementation)
				#(include #directives)
				#(include #empty)
				#(include #exprs)
				#(include #semicolon)
				#(include #illegal)
			]
		)

		space #(
			match "\s+"
			name "text.objn"
		)

		line #(
			match "\n$"
			name "text.objn"
		)

		line-comment #(
			match "//.*$"
			name "comment.objn"
		)

		doc-comment #(
			begin "/\*{2}"
			beginCaptures #(
				0 #(name "comment.objn")
			)

			end "\*/"
			endCaptures #(
				0 #(name "comment.objn")
			)
			
			patterns [
				; TODO: add actual XML embedding
				#(
					match "</?[^^>]+>"
					name "keyword.other.objn"
				)
				#(
					match "[^^*<]+"
					name "comment.objn"
				)
				#(
					match "<+"
					name "comment.objn"
				)
				#(
					match "\*+(?!/)"
					name "comment.objn"
				)
			]
		)

		block-comment #(
			begin "/\*"
			beginCaptures #(
				0 #(name "comment.objn")
			)
			
			end "\*/"
			endCaptures #(
				0 #(name "comment.objn")
			)

			patterns [
				#(
					match "[^^*]+"
					name "comment.objn"
				)
				#(
					match "\*+(?!/)"
					name "comment.objn"
				)
			]
		)

		comma #(
			match ","
			name "punctuation.separator.comma.objn"
		)

		semicolon #(
			match ";"
			name "punctuation.terminator.objn"
		)

		invalid #(
			match "."
			name "invalid.illegal.objn"
		)

		illegal #(
			match "[?\\`']"
			name "invalid.illegal.objn"
		)

		label #(
			match "([a-zA-Z_]\w*)(:)"
			captures #(
				1 #(name "entity.name.tag.objn")
				2 #(name "keyword.operator")
			)
		)

		method-label #(
			match "([a-zA-Z_]\w*)(:)"
			captures #(
				1 #(
					patterns [
						#(include #meta-label)
						#(match "[a-zA-Z_]\w*" name "entity.name.function.objn")
					]
				)
				2 #(name "keyword.operator")
			)
		)

		goto #(
			match "(\$goto)\s*(\()\s*([a-zA-Z_]\w*)\s*(\))"
			captures #(
				1 #(name "support.function.objn")
				2 #(name "punctuation.definition.args.begin.objn")
				3 #(name "entity.name.tag.objn")
				4 #(name "punctuation.definition.args.end.objn")
			)
		)

		builtins #(
			match "(\$)([a-zA-Z_]\w*)"
			captures #(
				1 #(name "support.function.objn")
				2 #(
					patterns [
						#(
							match {(?x)
								  t(null|int|float|bool|string|object|array|function|abstract)
								| array  | a(make|copy|size|sub|blit|concat)
								| string | s(make|size|copy|sub|[gs]et(?:16|32|[fd])?|blit|find)
								| new    | obj([gs]et(proto)?|call|fields?|remove)
								| (?:fast)?hash       | field
								| nargs  | call       | closure          | apply               | varargs
								| int|ito[fd]         | float|[fd]toi    | is(nan|infinite|bigendian) | i(add|sub|mult|div)
								| (get|is)kind
								| h(key|new|resize|get|mem|remove|set|add|iter|count|size)
								| print  | (re)?throw
								| istrue | not        | typeof  | p?compare
								| (exc|call)stack     | version | setresolver
								| loader | exports
							}
							name "support.function.objn"
						)
						#(
							match "\w+"
							name "invalid.illegal.objn"
						)
					]
				)
			)
		)

		meta-field #(
			match "__(r?(add|sub|mult|div|mod|pow|bit(and|or|xor)|sh[lr])|compare|[gs]et|string|bool|(bit)?not|pos|neg|(un)?serialize)(?=\b)"
			name "support.function.objn"
		)

		meta-label #(
			match "__(r?(add|sub|mult|div|mod|pow|bit(and|or|xor)|sh[lr])|compare|[gs]et)"
			name "support.function.objn"
		)

		field #(
			match "[a-zA-Z_]\w*"
			captures #(
				0 #(
					patterns [
						#(include #meta-field)
						#(
							match "[a-zA-Z_]\w*(?=[ \t]*\()"
							name "entity.name.function.objn"
						)
						#(
							match "[a-zA-Z_]\w*"
							name "variable.objn"
						)
					]
				)
			)
		)

		pair #(
			begin "(?<!\.)([a-zA-Z_]\w*)\s*(=>)"
			beginCaptures #(
				1 #(name "variable.objn")
				2 #(name "keyword.operator.objn")
			)

			end "(?<!\.)(?=[a-zA-Z_]\w*\s*=>)|(?=\})"

			patterns [
				#(include #empty)
				#(include #exprs)
				#(include #comma)
			]
		)

		constants #(
			patterns [
				#(
					match "@?(?:0x\h+|\d+(?:\.\d*)?|\.\d+)(?=\b)"
					name "constant.numeric.objn"
				)
				#(
					begin {@?"}
					beginCaptures #(
						0 #(name "string.objn")
					)

					end {"}
					endCaptures #(
						0 #(name "string.objn")
					)

					patterns [
						#(
							match {\\(?:["\\nrt]|\d{3})}
							name "constant.escape.objn"
						)
						#(
							match "\\."
							name "invalid.illegal.objn"
						)
						#(
							match {[^^"\\]+}
							name "string.objn"
						)
					]
				)
				#(
					match "(?:true|false|null|nil|NULL|this)(?=\b)"
					name "constant.language.objn"
				)
				#(
					begin "(@selector)(\()"
					beginCaptures #(
						1 #(name "keyword.objn")
						2 #(name "punctuation.definition.selector.begin.objn")
					)

					end "\)"
					endCaptures #(
						0 #(name "punctuation.definition.selector.end.objn")
					)

					patterns [
						#(include #method-label)
						#(match "[a-zA-Z_]\w*" name "entity.name.function.objn")
						#(include #space)
						#(include #invalid)
					]
				)
			]
		)

		function #(
			patterns [
				#(
					begin "(?<=[+\-*/%<>=!~&|^^,(\[{:;]\s*|^^\s*)\^^\s*(?=\()"
					beginCaptures #(
						0 #(name "keyword.operator.objn")
					)

					end "(?<=\))"

					patterns [
						#(include #function-args)
						#(include #invalid)
					]
				)
				#(
					match "(?<=[+\-*/%<>=!~&|^^,(\[{:;]\s*|^^\s*)\^^\s*(?=\{)"
					name "keyword.operator.objn"
				)
				#(
					begin "(function)\s*(?=\()"
					beginCaptures #(
						1 #(name "keyword.objn")
					)

					end "(?<=\))"

					patterns [
						#(include #function-args)
						#(include #invalid)
					]
				)
			]
		)

		function-args #(
			begin "\("
			beginCaptures #(
				0 #(name "punctuation.definition.parameters.begin.objn")
			)

			end "\)"
			endCaptures #(
				0 #(name "punctuation.definition.parameters.end.objn")
			)

			patterns [
				#(include #empty)
				#(include #comma)
				#(
					match "\$t(null|int|float|bool|string|object|array|function|abstract)(?=\b)"
					name "entity.name.type.objn"
				)
				#(
					match "[a-zA-Z_]\w*(?!\s*(?:\.{3}|$|[,)]))(?=\b)"
					name "entity.name.type.objn"
				)
				#(
					match "\|"
					name "keyword.operator.objn"
				)
				#(
					match "[a-zA-Z_]\w*"
					name "variable.parameter.objn"
				)
				#(match "(?<=\w)\.{3}" name "keyword.operator")
				#(include #invalid)
			]
		)

		keywords #(
			patterns [
				#(
					match "(?:var|while|do|if|else|try|return|break|continue|for|in)(?=\b)"
					name "keyword.objn"
				)
				#(
					begin "catch(?=\b)"
					beginCaptures #(
						0 #(name "keyword.objn")
					)

					end "[a-zA-Z_]\w*"
					endCaptures #(
						0 #(name "variable.objn")
					)

					patterns [
						#(include #empty)
					]
				)
				#(include #switch)
			]
		)

		call #(
			patterns [
				#(
					begin "(?<!\$)(?!(?:break|catch|continue|default|do|else|function|if|return|switch|try|var|while|for)(?=\b))(\.?)([a-zA-Z_]\w*)([ \t]*\()"
					beginCaptures #(
						1 #(name "keyword.operator.objn")
						2 #(
							patterns [
								#(include #meta-field)
								#(
									match "objn_(?:Copy|Typecheck)(?!\s*=>)(?=\b)"
									name "support.function.objn"
								)
								#(
									match "[a-zA-Z_]\w*"
									name "entity.name.function.objn"
								)
							]
						)
						3 #(name "punctuation.definition.args.begin.objn")
					)

					end "\)"
					endCaptures #(
						0 #(name "punctuation.definition.args.end.objn")
					)

					patterns [
						#(include #empty)
						#(include #comma)
						#(include #exprs)
					]
				)
				#(
					begin "(?<=[)\]}]|\$\w+)[ \t]*\("
					beginCaptures #(
						0 #(name "punctuation.definition.args.begin.objn")
					)

					end "\)"
					endCaptures #(
						0 #(name "punctuation.definition.args.end.objn")
					)

					patterns [
						#(include #empty)
						#(include #comma)
						#(include #exprs)
					]
				)
			]
		)

		method-call #(
			begin "(?<=(?:[(\[{,=+\-*/%<>!~&|^^:;]|=>|^^|\b(?:break|do|else|if|return|switch|try|while|in|for))\s*|\s+)\["
			beginCaptures #(
				0 #(name "punctuation.definition.method-call.begin.objn")
			)

			end "\]"
			endCaptures #(
				0 #(name "punctuation.definition.method-call.end.objn")
			)

			patterns [
				#(include #empty)
				#(
					match {(?<=[)\]^}\w"]\s*)[a-zA-Z_]\w*(?=\s*\])}
					captures #(
						0 #(
							patterns [
								#(include #meta-field)
								#(
									match "[a-zA-Z_]\w*"
									name "entity.name.function.objn"
								)
							]
						)
					)
				)
				#(include #method-label)
				#(include #exprs)
			]
		)
		
		name #(
			patterns [
				#(
					match "(?:ON|NL)_[a-zA-Z]\w*(?!\s*\()"
					name "entity.name.type.objn"
				)
				#(
					match "([a-zA-Z_]\w*)(?=\s*=\s*(?:\$varargs\s*\(\s*)?(?:function\s*\(|\^^\s*[({]))"
					name "entity.name.function.objn"
				)
				#(
					match "objn_(?:Copy|Typecheck)(?!\s*=>)(?=\b)"
					name "support.function.objn"
				)
				#(
					match "[a-zA-Z_]\w*(?!\s*=>)"
					name "source.objn"
				)
			]
		)

		property #(
			patterns [
				#(
					match "(\.)([a-zA-Z_]\w*)(?=\s*=\s*(?:\$varargs\s*\(\s*)?(?:function\s*\(|\^^\s*[({]))"
					captures #(
						1 #(name "keyword.operator.objn")
						2 #(
							patterns [
								#(include #meta-field)
								#(
									match "[a-zA-Z_]\w*"
									name "entity.name.function.objn"
								)
							]
						)
					)
				)
				#(
					match "(\.)([a-zA-Z_]\w*)"
					captures #(
						1 #(name "keyword.operator.objn")
						2 #(
							patterns [
								#(include #field)
							]
						)
					)
				)
			]
		)

		member #(
			match "(->)\s*([a-zA-Z_]\w*)"
			captures #(
				1 #(name "keyword.operator.objn")
				2 #(name "variable.objn")
			)
		)

		paren #(
			begin "@?\("
			beginCaptures #(
				0 #(name "punctuation.definition.paren.begin.objn")
			)

			end "\)"
			endCaptures #(
				0 #(name "punctuation.definition.paren.end.objn")
			)

			patterns [
				#(include #empty)
				#(include #exprs)
			]
		)

		dictionary #(
			begin "@\{"
			beginCaptures #(
				0 #(name "punctuation.definition.dictionary.begin.objn")
			)

			end "\}"
			endCaptures #(
				0 #(name "punctuation.definition.dictionary.end.objn")
			)

			patterns [
				#(match ":" name "keyword.operator.objn")
				#(include #exprs)
			]
		)

		subscript #(
			begin "@?\["
			beginCaptures #(
				0 #(name "punctuation.definition.subscript.begin.objn")
			)

			end "\]"
			endCaptures #(
				0 #(name "punctuation.definition.subscript.end.objn")
			)

			patterns [
				#(include #empty)
				#(include #exprs)
			]
		)

		operators #(
			match {(?x)
				  <<?=?
				| [+\-*/%&|^^]=?
				| =(?!>)=?
				| (?<!=)>{1,3}=?
				| (?:\+\+|--)=
				| \*\*=?
				| !=?
				| && | \|\|
				| ~
			}
			name "keyword.operator.objn"
		)

		block-or-object #(
			begin "\{"
			beginCaptures #(
				0 #(name "punctuation.definition.braces.begin.objn")
			)

			end "(?<=\})"

			patterns [
				#(include #empty)
				#(
					begin "(?=[a-zA-Z_]\w*[ \t]*=>)"
					
					end "\}"
					endCaptures #(
						0 #(name "punctuation.definition.braces.end.objn")
					)

					patterns [
						#(include #empty)
						#(include #pair)
						#(include #comma)
					]
				)
				#(
					begin "(?![a-zA-Z_]\w*[ \t]*=>|\s+|//|/\*|$\n?)"

					end "\}"
					endCaptures #(
						0 #(name "punctuation.definition.braces.end.objn")
					)

					patterns [
						#(include #statements)
					]
				)
			]
		)

		block #(
			begin "\{"
			beginCaptures #(
				0 #(name "punctuation.definition.braces.begin.objn")
			)

			end "\}"
			endCaptures #(
				0 #(name "punctuation.definition.braces.end.objn")
			)

			patterns [
				#(include #statements)
				#(include #invalid)
			]
		)

		switch #(
			begin "switch\b"
			beginCaptures #(
				0 #(name "keyword.objn")
			)

			end "\}"
			endCaptures #(
				0 #(name "punctuation.definition.braces.end.objn")
			)

			patterns [
				#(include #empty)
				#(
					begin "(?<!switch\s*)\{"
					beginCaptures #(
						0 #(name "punctuation.definition.braces.begin.objn")
					)

					end "(?=\})"
					
					patterns [
						#(
							begin "case(?=\b)"
							beginCaptures #(
								0 #(name "keyword.objn")
							)

							end ":"
							endCaptures #(
								0 #(name "keyword.operator.objn")
							)

							patterns [
								#(include #empty)
								#(include #exprs)
								#(include #invalid)
							]
						)
						#(
							match "(default)\s*(=>|:)"
							captures #(
								1 #(name "keyword.objn")
								2 #(name "keyword.operator.objn")
							)
						)
						#(
							match "(?<![+\-*/%&|^^<>=!,.:;(\[{]\s*|^^\s*)=>"
							name "keyword.operator.objn"
						)
						#(include #empty)
						#(include #exprs)
						#(include #invalid)
					]
				)
				#(include #exprs)
				#(include #invalid)
			]
		)

		function-decl #(
			begin "(function)\s+([a-zA-Z_]\w*)(?=\s*\()"
			beginCaptures #(
				1 #(name "keyword.objn")
				2 #(name "entity.name.function.objn")
			)

			end "(?<=\))"

			patterns [
				#(include #function-args)
			]
		)

		directives #(
			patterns [
				#(
					match {^^\s*(#import)\s*(<[^^>]*>|"(?:\\.|[^^\\"]+)*")\s*$}
					captures #(
						1 #(name "keyword.other.objn")
						2 #(name "string.objn")
					)
				)
			]
		)

		interface #(
			begin "^^\s*(@interface)\s+([a-zA-Z_]\w*)(?:\s*(:)\s*([a-zA-Z_]\w*(?:\.[a-zA-Z_]\w*)*))?\s*(//.*)?$"
			beginCaptures #(
				1 #(name "keyword.objn")
				2 #(name "entity.name.type.objn")
				3 #(name "keyword.operator.objn")
				4 #(
					patterns [
						#(
							match "\."
							name "keyword.operator.objn"
						)
						#(
							match "[a-zA-Z_]\w*"
							name "entity.name.type.objn"
						)
						#(include #invalid)
					]
				)
				5 #(name "comment.objn")
			)

			end "^^\s*(@end)\s*(//.*)?$"
			endCaptures #(
				1 #(name "keyword.objn")
				2 #(name "comment.objn")
			)

			patterns [
				#(
					begin "^^\s*([+-])\s*(?=[a-zA-Z_]\w*:)"
					beginCaptures #(
						1 #(name "keyword.operator.objn")
					)

					end "(?!\s*[a-zA-Z_])"

					patterns [
						#(include #method-label)
						#(
							match "(?<=:\s*)[a-zA-Z_]\w*"
							name "variable.parameter.objn"
						)
						#(include #space)
						#(include #invalid)
					]
				)
				#(
					match "^^\s*([+-])\s*([a-zA-Z_]\w*)"
					captures #(
						1 #(name "keyword.operator.objn")
						2 #(
							patterns [
								#(include #meta-field)
								#(match "[a-zA-Z_]\w*" name "entity.name.function.objn")
							]
						)
					)
				)
				#(
					match "^^\s*(@property)\s+([a-zA-Z_]\w*)\s*(//.*)?$"
					captures #(
						1 #(name "keyword.objn")
						2 #(name "variable.objn")
						3 #(name "comment.objn")
					)
				)
				#(
					match "^^\s*(@property)\s+([a-zA-Z_]\w*)\s*(\()\s*([a-z]\w+(?:\s*,\s*[a-z]\w+)*)\s*(\))\s*(//.*)?$"
					captures #(
						1 #(name "keyword.objn")
						2 #(name "variable.objn")
						3 #(name "punctuation.definition.attrs.begin.objn")
						4 #(
							patterns [
								#(include #empty)
								#(include #comma)
								#(
									match "(read|write|static)(?=\b)"
									name "entity.other.attribute-name"
								)
								#(include #invalid)
							]
						)
						5 #(name "punctuation.definition.attrs.end.objn")
						6 #(name "comment.objn")
					)
				)
				#(
					begin "^^\s*(@property)\s+([a-zA-Z_]\w*)\s*(=)\s*"
					beginCaptures #(
						1 #(name "keyword.objn")
						2 #(name "variable.objn")
						3 #(name "keyword.operator.assignment")
					)

					end ";"
					endCaptures #(
						0 #(name "punctuation.terminator.objn")
					)

					patterns [
						#(include #exprs)
					]
				)
				#(
					begin "^^\s*(@property)\s+([a-zA-Z_]\w*)\s*(\()\s*([a-z]\w+(?:\s*,\s*[a-z]\w+)*)\s*(\))\s*(=)\s*"
					beginCaptures #(
						1 #(name "keyword.objn")
						2 #(name "variable.objn")
						3 #(name "punctuation.definition.attrs.begin.objn")
						4 #(
							patterns [
								#(include #empty)
								#(include #comma)
								#(
									match "(read|write|static)(?=\b)"
									name "entity.other.attribute-name"
								)
								#(include #invalid)
							]
						)
						5 #(name "punctuation.definition.attrs.end.objn")
						6 #(name "keyword.operator.assignment")
					)

					end ";"
					endCaptures #(
						0 #(name "punctuation.terminator.objn")
					)

					patterns [
						#(include #exprs)
					]
				)
				#(include #empty)
			]
		)

		implementation #(
			begin "^^\s*(@implementation)\s+([a-zA-Z_]\w*)\s*(//.*)?$"
			beginCaptures #(
				1 #(name "keyword.objn")
				2 #(name "entity.name.type.objn")
				3 #(name "comment.objn")
			)

			end "^^\s*(@end)\s*(//.*)?$"
			endCaptures #(
				1 #(name "keyword.objn")
				2 #(name "comment.objn")
			)

			patterns [
				#(
					begin "^^\s*([+-])\s*(?=[a-zA-Z_]\w*:)"
					beginCaptures #(
						1 #(name "keyword.operator.objn")
					)

					end "(?=\{)"

					patterns [
						#(include #method-label)
						#(
							match "(?<=[:)]\s*)[a-zA-Z_]\w*"
							name "variable.parameter.objn"
						)
						#(
							begin "(?<=:\s*)\("
							beginCaptures #(
								0 #(name "punctuation.definition.type-annotation.begin.objn")
							)

							end "\)(?=\s*[a-zA-Z_])"
							endCaptures #(
								0 #(name "punctuation.definition.type-annotation.end.objn")
							)

							patterns [
								#(
									match "\$t(null|int|float|bool|string|object|array|function|abstract)(?=\b)"
									name "entity.name.type.objn"
								)
								#(
									match "[a-zA-Z_]\w*(?=\b)"
									name "entity.name.type.objn"
								)
								#(
									match "\|"
									name "keyword.operator.objn"
								)
								#(include #space)
								#(include #invalid)
							]
						)
						#(include #space)
						#(include #invalid)
					]
				)
				#(
					match "^^\s*([+-])\s*([a-zA-Z_]\w*)(?=\s*\{)"
					captures #(
						1 #(name "keyword.operator.objn")
						2 #(
							patterns [
								#(include #meta-field)
								#(match "[a-zA-Z_]\w*" name "entity.name.function.objn")
							]
						)
					)
				)
				#(include #block)
				#(include #empty)
			]
		)
	)
)
